#jinja2: trim_blocks: "true", lstrip_blocks: "true"
{% macro insert_field_if_exists(label, value) -%}
  {%- if value is defined -%}
    {{ label }}={{ value }}
  {%- endif %}
{%- endmacro -%}
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id={{ inventory_hostname [-1] }}

# Confluent support metrics for Confluent center (disable by default on digical)
{{ insert_field_if_exists('confluent.support.metrics.enable', item.static.confluent_support_metrics_enable) }}

# Enable auto creation of topic on the server
{{ insert_field_if_exists('auto.create.topics.enable', item.static.auto_create_topics_enable) }}

# Enables auto leader balancing. A background thread checks and triggers leader balance if required at regular intervals
{{ insert_field_if_exists('auto.leader.rebalance.enable', item.static.auto_leader_rebalance_enable) }}

# Enable controlled shutdown of the server
{{ insert_field_if_exists('controlled.shutdown.enable', item.static.controlled_shutdown_enable) }}
{{ insert_field_if_exists('controlled.shutdown.max.retries', item.static.controlled_shutdown_max.retries) }}

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://localhost:9092
listeners={{ item.static.listeners_protocol }}://{{ ansible_default_ipv4.address }}:{{ item.static.listeners_port }}
{{ insert_field_if_exists('broker.id.generation.enable', item.static.broker_id_generation_enable) }}

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
advertised.listeners=PLAINTEXT://{{ ansible_default_ipv4.address }}:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
{{ insert_field_if_exists('num.network.threads', item.static.num_network_threads) }}

# The number of threads that the server uses for processing requests, which may include disk I/O
{{ insert_field_if_exists('num.io.threads', item.static.num_io_threads) }}

# The send buffer (SO_SNDBUF) used by the socket server
{{ insert_field_if_exists('socket.send.buffer.bytes', item.static.socket_send_buffer_bytes) }}

# The receive buffer (SO_RCVBUF) used by the socket server
{{ insert_field_if_exists('socket.receive.buffer.bytes', item.static.socket_receive_buffer_bytes) }}

# The maximum size of a request that the socket server will accept (protection against OOM)
{{ insert_field_if_exists('socket.request.max.bytes', item.static.socket_request_max_bytes) }}


############################# Log Basics #############################

# A comma separated list of directories under which to store log files
{{ insert_field_if_exists('log.dirs', item.static.log_dirs) }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
{{ insert_field_if_exists('num.partitions', item.static.num_partitions) }}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
{{ insert_field_if_exists('num.recovery.threads.per.data.dir', item.static.num_recovery_threads_per_data_dir) }}

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
{{ insert_field_if_exists('offsets.topic.replication.factor', item.static.offsets_topic_replication_factor) }}
{{ insert_field_if_exists('transaction.state.log.replication.factor', item.static.transaction_state_log_replication_factor) }}
{{ insert_field_if_exists('transaction.state.log.min.isr', item.static.transaction_state_log_min_isr) }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

# The minimum ratio of dirty log to total log for a log to eligible for cleaning
{{ insert_field_if_exists('log.cleaner.enable', item.static.log_cleaner_enable) }}
{{ insert_field_if_exists('log.cleaner.min.cleanable.ratio', item.static.log_cleaner_min_cleanable_ratio) }}
{{ insert_field_if_exists('log.cleaner.threads', item.static.log_cleaner_threads) }}

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
{{ insert_field_if_exists('log.retention.hours', item.static.log_retention_hours) }}
{{ insert_field_if_exists('log.retention.bytes', item.static.log_retention_bytes) }}
{{ insert_field_if_exists('log.cleanup.policy', item.static.log_cleanup_policy) }}

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
{{ insert_field_if_exists('log.segment.bytes', item.static.log_segment_bytes) }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
# log.retention.check.interval.ms=300000
{{ insert_field_if_exists('log.retention.check.interval.ms', item.static.log_retention_check_interval_ms) }}

#The maximum time before a new log segment is rolled out (in hours), secondary to log.roll.ms property
{{ insert_field_if_exists('log.roll.hours', item.static.log_roll_hours) }}

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
# zookeeper.connect=localhost:2181
zookeeper.connect={{ item[appEnv].zkserver1 }}:{{ item.static.zk_port }},{{ item[appEnv].zkserver2 }}:{{ item.static.zk_port }},{{ item[appEnv].zkserver3 }}:{{ item.static.zk_port }}

# Timeout in ms for connecting to zookeeper
{{ insert_field_if_exists('zookeeper.connection.timeout.ms', item.static.zookeeper_connection_timeout_ms) }}


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
{{ insert_field_if_exists('group.initial.rebalance.delay.ms', item.static.group_initial_rebalance_delay_ms) }}

